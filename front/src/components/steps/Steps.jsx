import { useState, useEffect, useRef } from "react";
import { motion, AnimatePresence } from "framer-motion";
import confetti from "canvas-confetti";
import styles from "./steps.module.css";

const steps = [
  {
    title: "–®–ê–ì 1",
    text: "–ù–∞–ø–∏—à–∏ –º–Ω–µ: –æ–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ (–æ–ø–ª–∞—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞, –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É, —Ä–∞–±–æ—Ç–∞ —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π).",
  },
  {
    title: "–®–ê–ì 2",
    text: "–ú—ã —Å–æ–≥–ª–∞—Å—É–µ–º –¥–µ—Ç–∞–ª–∏ (—Å—É–º–º—É, —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–≤–æ–¥–∞, —Å–µ—Ä–≤–∏—Å).",
  },
  {
    title: "–®–ê–ì 3",
    text: "–Ø –æ–ø–ª–∞—á–∏–≤–∞—é —É—Å–ª—É–≥—É",
  },
  {
    title: "–®–ê–ì 4",
    text: "–¢—ã –ø–æ–ª—É—á–∞–µ—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏.",
  },
];

const Steps = () => {
  const [index, setIndex] = useState(0);
  const confettiFired = useRef(false);

  const isLastStep = index === steps.length - 1;

  const nextStep = () => {
    if (index < steps.length - 1) {
      setIndex((prev) => prev + 1);
    }
  };

  const prevStep = () => {
    if (index > 0) {
      setIndex((prev) => prev - 1);
    }
  };

  const resetSteps = () => {
    setIndex(0);
    confettiFired.current = false;
  };

  const fireConfetti = () => {
    confetti({
      particleCount: 200,
      spread: 100,
      origin: { y: 0.6 },
      zIndex: 9999,
    });
    setTimeout(() => {
      confetti({
        particleCount: 150,
        angle: 60,
        spread: 100,
        origin: { x: 0 },
        zIndex: 9999,
      });
      confetti({
        particleCount: 150,
        angle: 120,
        spread: 100,
        origin: { x: 1 },
        zIndex: 9999,
      });
    }, 400);
  };

  useEffect(() => {
    if (isLastStep && !confettiFired.current) {
      fireConfetti();
      confettiFired.current = true;
    }
  }, [isLastStep]);

  return (
    <section className={styles.steps}>
      <div className={styles.sliderContainer}>
        <button
          onClick={prevStep}
          className={styles.arrow}
          disabled={index === 0}
        >
          ‚Üê
        </button>

        <AnimatePresence mode="wait">
          <motion.div
            key={index}
            className={styles.stepCard}
            initial={{ opacity: 0, x: 50, scale: 0.95 }}
            animate={{ opacity: 1, x: 0, scale: 1 }}
            exit={{ opacity: 0, x: -50, scale: 0.95 }}
            transition={{ duration: 0.4 }}
          >
            <h3 className={styles.stepNum}>{steps[index].title}</h3>
            <p>{steps[index].text}</p>

            {isLastStep && (
              <motion.div
                className={styles.completeBanner}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.4 }}
              >
                üéâ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ.
                <button className={styles.resetBtn} onClick={resetSteps}>
                  –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
                </button>
              </motion.div>
            )}
          </motion.div>
        </AnimatePresence>

        <button
          onClick={nextStep}
          className={styles.arrow}
          disabled={isLastStep}
        >
          ‚Üí
        </button>
      </div>
      <div className={styles.telegramBlock}>
        <img
          src="/images/avatar.jpg"
          alt="–í–∞—à –∞–≤–∞—Ç–∞—Ä"
          className={styles.avatar}
        />
        <div className={styles.telegramText}>
          <h4>–•–æ—á–µ—à—å –≤—Å—ë –æ–±—Å—É–¥–∏—Ç—å –ª–∏—á–Ω–æ?</h4>
          <p>–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ Telegram, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.</p>
          <a
            href="https://t.me/yurasokol"
            target="_blank"
            rel="noopener noreferrer"
            className={styles.telegramBtn}
          >
            ‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram
          </a>
        </div>
      </div>
    </section>
  );
};

export default Steps;
