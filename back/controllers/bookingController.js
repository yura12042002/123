const Booking = require("../models/Booking");
const bookingBot = require("../bots/bookingBot");

const adminId = process.env.ADMIN_TELEGRAM_ID;

exports.getUnavailableDates = async (req, res) => {
  try {
    const bookings = await Booking.find({ status: "confirmed" });
    const dates = bookings.map((b) => ({
      from: b.dateFrom,
      to: b.dateTo,
    }));
    res.json(dates);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç:", err.message);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç" });
  }
};

exports.createBooking = async (req, res) => {
  try {
    const { name, telegram, guests, dateFrom, dateTo } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !dateFrom || !dateTo) {
      return res.status(400).json({ message: "–ò–º—è –∏ –¥–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏
    if (typeof name !== "string" || name.trim().length < 2) {
      return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è" });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π
    const guestsNumber = Number(guests);
    if (!guestsNumber || guestsNumber < 1 || guestsNumber > 4) {
      return res.status(400).json({ message: "–ì–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 4" });
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
    const from = new Date(dateFrom);
    const to = new Date(dateTo);
    const today = new Date();
    today.setHours(0, 0, 0, 0); // —É–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è

    // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ >= —Å–µ–≥–æ–¥–Ω—è
    if (from < today) {
      return res
        .status(400)
        .json({ message: "–ù–µ–ª—å–∑—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–Ω–∏–º —á–∏—Å–ª–æ–º" });
    }

    // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è >= –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
    if (to < from) {
      return res
        .status(400)
        .json({ message: "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞" });
    }

    // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚â§ 7 –¥–Ω–µ–π
    const diffDays = (to - from) / (1000 * 60 * 60 * 24);
    if (diffDays > 7) {
      return res
        .status(400)
        .json({ message: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî 7 –¥–Ω–µ–π" });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º–∏ –±—Ä–æ–Ω—è–º–∏
    const conflict = await Booking.findOne({
      status: "confirmed",
      $or: [
        { dateFrom: { $lte: to }, dateTo: { $gte: from } }, // –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è
      ],
    });

    if (conflict) {
      return res.status(409).json({ message: "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã —É–∂–µ –∑–∞–Ω—è—Ç—ã" });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω—å
    const booking = await Booking.create({
      name: name.trim(),
      telegram: telegram?.trim() || "",
      guests: guestsNumber,
      dateFrom: from,
      dateTo: to,
    });

    const formatDate = (date) =>
      new Date(date).toLocaleDateString("ru-RU", {
        day: "2-digit",
        month: "2-digit",
        year: "numeric",
      });

    const message = `
üè° *–ù–æ–≤–∞—è –±—Ä–æ–Ω—å –∫–≤–∞—Ä—Ç–∏—Ä—ã!*

üë§ *–ò–º—è:* ${booking.name}
üì® *Telegram:* ${booking.telegram || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
üë• *–ì–æ—Å—Ç–µ–π:* ${booking.guests}

üìÖ *–ü–µ—Ä–∏–æ–¥:*
—Å *${formatDate(booking.dateFrom)}* –ø–æ *${formatDate(booking.dateTo)}*

üïí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${formatDate(new Date())}
`;

    await bookingBot.sendMessage(process.env.ADMIN_TELEGRAM_ID, message, {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [
          [
            { text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data: `approve_${booking._id}` },
            { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `reject_${booking._id}` },
          ],
        ],
      },
    });

    res.status(201).json(booking);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏:", err.message);
    res.status(500).json({
      message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏",
      error: err.message,
    });
  }
};
